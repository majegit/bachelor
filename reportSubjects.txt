Scanner:
Made a program from main function? Maybe this needs to be changed, so we just have a global scope with one of the functions being named "main".
Realised chars had to be explicitly sandwiched by the character: ' the reason being that we wouldn't be able to tell a char constant from an identifier.


Parser:
What counts as a statement and what is an expression? Do we allow lone statements like 2 + 2; ?
What if we are interested in calling a function just to get its side effects?
like "fun1();" Even though the function returns something we ignore it.


TreeTraversal:
Something about traversal being duplicated for different phases
Made template for treetraversal and copypasted it.

SymbolCollection:
While designing the symbol collection phase we found ourselves with the problem of when to create the symbol tables. One approach was to create a new table every time we met a compound statement. This led to complications when dealing with function declarations as their formal parameters should be in same symbol table as the compound statement but since we would traverse the compound statement after the formal parameters we would have to pass them down which seemed awkward since handling of parameters were dependent on a context we no longer had.
Therefore we decided that every symbol table should be created before traversing a compound statement. This also led to the nice feature of only passing the current symbol table rather than sometimes the parents' symbol table during the traversal. This had the drawback of some code duplication but it seemed purer in theory.


TypeChecking:
So for most expressions we will know what the type of expression is going to be, by looking at the left side of the assignment statement, or by looking at the return type of a function.
HOWEVER, for this construction "print(exp);" we will never know what the type of expression is, it could be many things, and we need to decide on a strategy for detecting the type of a print-exp.

We found inspiration in the python and the c languages, in c ypu explicitly declare the type of your expression(s), and in python it would infer the type. But in python you would not be able to print
'a' + 1 because "str and int are incompatible", but in c this is perfectly valid, and 'a' + 1 can be printed both as a char or an int. printf("%c %d",'a' + 1,'a' + 1); is a perfectly valid statement.


